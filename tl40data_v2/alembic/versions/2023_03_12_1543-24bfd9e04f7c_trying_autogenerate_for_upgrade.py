"""Trying autogenerate for upgrade

Revision ID: 24bfd9e04f7c
Revises: 
Create Date: 2023-03-12 15:43:05.395243

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session

from tables import Trainer, Response

# revision identifiers, used by Alembic.
revision = '24bfd9e04f7c'
down_revision = None
branch_labels = None
depends_on = None


def save_response_from_old_response(session, old_response):
    """Converts from old to new.
    
    Note that trainer schema seems to mismatch data, so we use indexes.

    Old: [id, timestamp, trainername, strdata, ...]
    After: [id, trainer_id, timestamp, strdata, ...]   TODO 
    """
    #trainer_name = old_response.trainer.lower()
    trainer_name = old_response[2].lower()
    # Drop rows from test users
    if trainer_name in ["wooloo", "potato"]:
        return
    if trainer_name == 'brenrigh':
        trainer_name = 'bmenrigh'
    trainer = session.query(Trainer).filter(Trainer.name == trainer_name).first()
    trainers = session.query(Trainer).all()
    # List known trainer names
    if trainer is None:
        trainer = Trainer(name=trainer_name)
        session.add(trainer)
        session.flush()
        session.commit()

    response = Response(trainer=trainer, timestamp=old_response[1], strdata=old_response[3], revision=1)

    if trainer.newest_response_date is None or float(old_response[1]) > float(trainer.newest_response_date):
        trainer.newest_response_date = old_response[1]
        # Sanity check: does response object have an id at this point? maybe do after add()?
        trainer.newest_response = response.id

    session.add(response)
    session.add(trainer)
    session.flush()
    session.commit()

    return response

def upgrade() -> None:
    #op.drop_column('response', 'trainer')
    op.add_column('trainer', sa.Column('newest_response', sa.Integer(), nullable=True))
    op.add_column('trainer', sa.Column('newest_response_date', sa.String(), nullable=True))

    # Because we're migrating sqlite3, we have to do this in two steps:
    # 1. copy the data from the old table to a new table with same schema
    # 2. drop the old table
    # 3. create a new table with the same name and the new schema
    # 4. copy the data from the new table to the old table
    # 5. drop the renamed/copied table

    # Copy the responses table to a new table with the same schema
    op.create_table('response_old', sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('trainer', sa.String(), nullable=True),
                    sa.Column('timestamp', sa.String(), nullable=True),
                    sa.Column('strdata', sa.String(), nullable=True),
                    sa.Column('edited', sa.Integer(), nullable=True),
                    sa.Column('revision', sa.Integer(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_response_old')))
    op.execute('INSERT INTO response_old SELECT * FROM response')

    # Drop the old table
    op.drop_table('response')
    # Create the new table with the new schema, and new foreign key relation
    op.create_table('response', sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('trainer_id', sa.Integer(), nullable=True),
                    sa.Column('timestamp', sa.String(), nullable=True),
                    sa.Column('strdata', sa.String(), nullable=True),
                    sa.Column('edited', sa.Integer(), nullable=True),
                    sa.Column('revision', sa.Integer(), nullable=True),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_response')),
                    sa.ForeignKeyConstraint(['trainer_id'], ['trainer.id'], ))

    # Get a lookup dictionary of trainer names to trainer ids
    #trainer_lookup = {}
    #for row in op.get_bind().execute('SELECT id, name FROM trainer'):
    #    trainer_lookup[row[1]] = row[0]

    # Copy the data from the backup table to the redone table
    session = Session(bind=op.get_bind())
    for row in session.execute('SELECT * FROM response_old'):
        #if row

        #op.execute('INSERT INTO response VALUES (?, ?, ?, ?, ?, ?)', row)
        save_response_from_old_response(session, row)

    # Drop the backup table
    op.drop_table('response_old')

    # ### commands auto generated by Alembic - please adjust! ###
    #op.add_column('response', sa.Column('trainer_id', sa.Integer(), nullable=True))
    #op.create_foreign_key(None, 'response', 'trainer', ['trainer_id'], ['id'])
    # add trainers

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('trainer', 'newest_response_date')
    op.drop_column('trainer', 'newest_response')
    op.add_column('response', sa.Column('trainer', sa.VARCHAR(), nullable=True))
    op.drop_constraint(None, 'response', type_='foreignkey')
    op.drop_column('response', 'trainer_id')
    # ### end Alembic commands ###
